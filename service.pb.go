// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package grpcunavailable

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RunRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunRequest) Reset()         { *m = RunRequest{} }
func (m *RunRequest) String() string { return proto.CompactTextString(m) }
func (*RunRequest) ProtoMessage()    {}
func (*RunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a53443ea3b8d8367, []int{0}
}
func (m *RunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunRequest.Unmarshal(m, b)
}
func (m *RunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunRequest.Marshal(b, m, deterministic)
}
func (dst *RunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunRequest.Merge(dst, src)
}
func (m *RunRequest) XXX_Size() int {
	return xxx_messageInfo_RunRequest.Size(m)
}
func (m *RunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunRequest proto.InternalMessageInfo

type RunResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunResponse) Reset()         { *m = RunResponse{} }
func (m *RunResponse) String() string { return proto.CompactTextString(m) }
func (*RunResponse) ProtoMessage()    {}
func (*RunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a53443ea3b8d8367, []int{1}
}
func (m *RunResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunResponse.Unmarshal(m, b)
}
func (m *RunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunResponse.Marshal(b, m, deterministic)
}
func (dst *RunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunResponse.Merge(dst, src)
}
func (m *RunResponse) XXX_Size() int {
	return xxx_messageInfo_RunResponse.Size(m)
}
func (m *RunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RunRequest)(nil), "grpcunavailable.RunRequest")
	proto.RegisterType((*RunResponse)(nil), "grpcunavailable.RunResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UnavailableClient is the client API for Unavailable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UnavailableClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
}

type unavailableClient struct {
	cc *grpc.ClientConn
}

func NewUnavailableClient(cc *grpc.ClientConn) UnavailableClient {
	return &unavailableClient{cc}
}

func (c *unavailableClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/grpcunavailable.Unavailable/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnavailableServer is the server API for Unavailable service.
type UnavailableServer interface {
	Run(context.Context, *RunRequest) (*RunResponse, error)
}

func RegisterUnavailableServer(s *grpc.Server, srv UnavailableServer) {
	s.RegisterService(&_Unavailable_serviceDesc, srv)
}

func _Unavailable_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnavailableServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcunavailable.Unavailable/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnavailableServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Unavailable_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcunavailable.Unavailable",
	HandlerType: (*UnavailableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Unavailable_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_a53443ea3b8d8367) }

var fileDescriptor_service_a53443ea3b8d8367 = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4f, 0x2f, 0x2a, 0x48, 0x2e,
	0xcd, 0x4b, 0x2c, 0x4b, 0xcc, 0xcc, 0x49, 0x4c, 0xca, 0x49, 0x55, 0xe2, 0xe1, 0xe2, 0x0a, 0x2a,
	0xcd, 0x0b, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0xe2, 0xe5, 0xe2, 0x06, 0xf3, 0x8a, 0x0b,
	0xf2, 0xf3, 0x8a, 0x53, 0x8d, 0xfc, 0xb9, 0xb8, 0x43, 0x11, 0x6a, 0x85, 0x1c, 0xb8, 0x98, 0x83,
	0x4a, 0xf3, 0x84, 0xa4, 0xf5, 0xd0, 0x0c, 0xd1, 0x43, 0x98, 0x20, 0x25, 0x83, 0x5d, 0x12, 0x62,
	0xa0, 0x93, 0x60, 0x14, 0xba, 0x03, 0x92, 0xd8, 0xc0, 0x0e, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x7d, 0x85, 0xd6, 0xab, 0xa9, 0x00, 0x00, 0x00,
}
